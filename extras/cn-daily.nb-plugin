#!/usr/bin/env bash
###############################################################################
# cn-daily.nb-plugin
#
# Write to a daily log using a format expected by cielagonote:
# https://github.com/pdxmph/cielagonote
#
# Install with:
#   nb plugin install https://github.com/pdxmph/cielagonote/blob/main/extras/cn-daily.nb-plugin
#
###############################################################################

# Register the "daily" subcommand.
_subcommands add "daily"

# Help / usage text.
_subcommands describe "daily" <<HEREDOC
$(_color_primary "Usage"):
  ${_ME} daily [<content>] [--prev [<number>]]

$(_color_primary "Options"):
  --prev [<number>]   List previous days and open day by that index.

$(_color_primary "Description"):
  Add notes to a daily log. No args → show today's file (or prompt).
  With content → append a "## [HH:MM:SS]  CONTENT" entry (with blank line).
  --prev → list past files as [0]=today, [1]=yesterday, etc.
  --prev N → open the Nᵗʰ entry in that list.
HEREDOC

# Main handler
_daily() {
  # Show a file
  _daily_show() {
    local path="$1"
    [[ -n "$path" ]] || return 1
    printf "%s:\n" "$(_color_primary "${path##*/}")"
    _show "$path" --print
  }

  local _content=( "$@" )
  local _notebook_path="$(_notebooks current --path)"
  local _today_fn="daily-$(date '+%Y-%m-%d').md"
  local _today_path="${_notebook_path}/${_today_fn}"

  # 1) No args → show (or prompt) today's file
  if [[ -z "${_content[*]}" ]]; then
    if [[ ! -e "$_today_path" ]]; then
      printf "Add the first note of the day: %s daily <content>\n" "${_ME}"
    else
      _daily_show "$_today_path"
    fi
    return 0
  fi

  # 2) --prev branch
  if _contains "${_content[0]}" "--prev" "--all" "--ago" "--day" "--days" "--previous"; then
    # gather only real files
    mapfile -t files < <(compgen -G "${_notebook_path}/daily-????-??-??.md")

    # nothing yet?
    if (( ${#files[@]} == 0 )); then
      printf "Add the first daily note: %s daily <content>\n" "${_ME}"
      return 0
    fi

    # sort ascending (oldest → newest)
    IFS=$'\n' files=( $(printf '%s\n' "${files[@]}" | sort) ); unset IFS

    # 2a) numeric arg? open that exact indexed day
    if [[ "${_content[1]:-}" =~ ^[0-9]+$ ]]; then
      local rel_idx="${_content[1]}"
      local arr_idx=$(( ${#files[@]} - 1 - rel_idx ))
      if (( arr_idx < 0 )); then
        _exit_1 printf "Not found.\n"
      fi
      _daily_show "${files[arr_idx]}"
      return 0
    fi

    # 2b) list them: [0]=today, [1]=yesterday, …
    for (( rel_idx=0; rel_idx<${#files[@]}; rel_idx++ )); do
      local arr_idx=$(( ${#files[@]} - 1 - rel_idx ))
      local prefix=$(_color_brackets "$rel_idx")
      _list "${files[arr_idx]}" --no-color | sed "s/^/${prefix} /"
    done
    return 0
  fi

  # 3) default: append a new entry (blank line + L2 heading)
  local ts="$(date '+%H:%M:%S')"
  local body="$(_join ' ' "${_content[@]}")"
  local entry="$(printf '\n## [%s]  %s' "$ts" "$body")"

  if [[ ! -e "$_today_path" ]]; then
    _add --content "$entry" --filename "$_today_fn"
  else
    _edit "$_today_fn" --append "$entry"
  fi
}
